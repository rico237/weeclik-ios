disabled_rules: # rule identifiers to exclude from running
  - control_statement
  - todo
  - function-body-length
  - function_parameter_count
  - trailing_whitespace
opt_in_rules: # some rules are only opt-in
  - empty_count
  # Find all the available rules by running:
  # swiftlint rules
included: # paths to include during linting. `--path` is ignored if present.
  - WeeClik
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
  - WeeClik/Paintcodes/StyleKitWeeclik.swift
  - WeeClik/En_cours/AjoutCommerceVC.swift
  # - Source/ExcludedFolder
  # - Source/ExcludedFile.swift
  # - Source/*/ExcludedFile.swift # Exclude files with a wildcard
analyzer_rules: # Rules run by `swiftlint analyze` (experimental)
  - explicit_self

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 160
# they can set both explicitly
file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 70
    error: 80
  excluded: iPhone # excluded via string
identifier_name:
  min_length: # only min_length
    error: 4 # only error
  excluded: # excluded via string array
    - x
    - y
    - i
    - j
    - id
    - URL
    - url
    - acl
    - key
    - top
    - row
    - app
    - tel
    - nom
    - nib
    - tag
reporter: "xcode" # reporter type

#// swiftlint:disable:next force_cast